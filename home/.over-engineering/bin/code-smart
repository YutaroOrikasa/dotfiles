#!/bin/bash

# open a document by a tab or a new window smartly for vscode.
# envvar $CODE_SMART_WAIT (seconds): If you close the opened document tab within this second,
#                                    this script will open the document in a new code window.
#                                    Default: 10.

CODE_SMART_WAIT="${CODE_SMART_WAIT:-10}"

list_child_pids() {
    IFS= read -r ppid
    ps -eo ppid,pid,comm | \
        awk -v ppid=$ppid '$1 == ppid { print $2 }'
}

# $1: code command pid
kill_vscode_app_instance() {
    kill "$(echo $1 | list_child_pids | list_child_pids)" >/dev/null 2>&1
}

unset CDPATH

case "$1" in
    -n|--new-window)
        exec code "$@"
        ;;
esac

case $# in
    0)
        exec code
        ;;
    1)
    set -x
        # We have to track (or canonicate) "$1" path
        # because if "$1" includes symbolic link in its path,
        # vscode can't handle git statuses well.
        # Issues:
        #  https://github.com/microsoft/vscode/issues/5970
        #  https://github.com/microsoft/vscode/issues/90611
        #
        # We try to canonicate "$1" path (but not completely).

        # readlink emulation
        # Using ideas of https://github.com/ko1nksm/readlinkf
        # Japanese article: https://qiita.com/ko1nksm/items/873cfb9c6ceb6ef32ec9
        if [ -L "$1" ]; then
            set -- "$(
                ls_out=$(ls -ld "$1")
                link_dest="${ls_out#*$1 -> }"
                if [ "${link_dest%%[^/]*}" = "/" ]; then
                    # link_dest is abs path, starts with '/'.
                    printf %s "$link_dest"
                else
                    # link_dest is rel path.
                    printf %s "$(dirname -- "$1")"/"$link_dest"
                fi
            )"
        fi
        # NOTE: This code can't handle recursive symlinks.
        #       We have to loop above process for completely readlink emulation.

        # Canonicate directory paths of $1 (realpath emulation)
        if [ -d "$1" ]; then
            set -- "$(cd -- "$1"; pwd -P)"
        elif [ -f "$1" ]; then
            set -- "$(cd -- "$(dirname -- "$1")"; pwd -P)"/"$(basename -- "$1")"
        fi

        set +x
        ;;
esac

case "$1" in
    -w|--wait)
        WAIT=1
        shift
        ;;
    -)
        WAIT=1
        ;;
esac

# First vscode instance created when vscode not launched.
# It is done only when code-smart called without --wait option
# in order that code-smart --wait emulates code --wait behavior.
# The behavior is that if code --wait creates a window and a tab,
# the window will be closed when the tab is closed.
if [ -z "$WAIT" ];then
    code "$@"
fi

sleep "${CODE_SMART_WAIT}" &

if [ "$1" = - ];then
    (umask 177; : >/tmp/code-smart-$$.txt)
    trap "rm /tmp/code-smart-$$.txt" EXIT
    tee /tmp/code-smart-$$.txt | code --wait "$@"
    code_pid=never_use
else
    code --wait "$@" &
    code_pid=$(jobs -p %code)
fi
# Kill extra code --wait instance in dock.
# Don't kill when code-smart called with --wait option.
# because code-smart --wait will quit before the opened
# document tab closed, it is not 'wait' in spite of '--wait'.
if [ -z "$WAIT" ];then
    (sleep $((CODE_SMART_WAIT + 1)); kill_vscode_app_instance $code_pid) &
fi

if [ "$1" != - ];then
    wait %code
fi

# Workaround for bash bug
jobs >/dev/null 2>&1
sh -c ''

# if code tab closed in 10 seconds
if kill %'sleep' >/dev/null 2>&1 ;then
    {
        echo 'You have closed the document quite immediately.'
        printf 'Do you want to open it with new vscode window? [Y/n] '
    } >&2
    IFS= read -r answer <&2
    case "$answer" in
        Y|y|"")
            # continue
            ;;
        *)
            exit 0
            ;;
    esac

    if [ "$1" = - ];then
        # Always [ "$WAIT" = 1 ] so add '--wait'
        cat /tmp/code-smart-$$.txt - | code -n --wait "$@"
    elif [ "$WAIT" = 1 ] ;then
        code -n --wait "$@"
    else
        code -n "$@"
    fi
fi
